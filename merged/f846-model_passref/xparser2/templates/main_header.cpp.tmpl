// returns time in seconds
static double get_time(void) {
  struct timeval now;
  gettimeofday(&now, NULL);
  return now.tv_sec + (now.tv_usec * 1.e-6);
}

void die(const std::string& message, int rc = 2) {
  std::cerr << "ERROR: " << message << std::endl;
  exit(rc);
}

int main(int argc, const char* argv[]) {
  if (argc < 3 || argc > 4) {
    std::cerr << "Usage: " << argv[0];
    std::cerr << " POP_DATA NUM_ITERATIONS [NUM_CORES]" << std::endl;
    exit(1);
  }

  std::string pop_path = argv[1];
  
  int num_iters = atoi(argv[2]);
  if (num_iters < 1) {
    die("Invalid value for NUM_ITERATIONS");
  }

  int num_cores = 1;  // default to single core run
  if (argc > 3) {
    num_cores = atoi(argv[3]);
    if (num_cores < 1) {
      die("Invalid value for NUM_CORES", 3);
    }
  }

  #ifdef DBGBUILD
    srand(1);  // for debug, fix random seed
  #else
    srand(time(NULL));
  #endif
