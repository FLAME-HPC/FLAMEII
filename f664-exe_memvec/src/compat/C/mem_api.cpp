/*!
 * \file include/flame.h
 * \author Shawn Chin
 * \date 2012
 * \copyright Copyright (c) 2012 STFC Rutherford Appleton Laboratory
 * \copyright Copyright (c) 2012 University of Sheffield
 * \copyright GNU Lesser General Public License
 * \brief Mock Implementation of C API for memory access
 * \note These routines should instead be generated by the parser for each model
 */
#ifndef COMPAT__C__MEM_API_CPP_
#define COMPAT__C__MEM_API_CPP_
#include "include/flame.h"
#include "mem/agent_memory_iterator.hpp"

namespace m = flame::mem;

#ifdef __cplusplus
extern "C" {
#endif

int flame_mem_get_int_actual_(void* mem, const char* key) {
  return static_cast<m::AgentMemoryIterator*>(mem)->Get<int>(key);
}

void flame_mem_set_int_actual_(void* mem, const char* key, int value) {
  static_cast<m::AgentMemoryIterator*>(mem)->Set<int>(key, value);
}

double flame_mem_get_double_actual_(void* mem, const char* key) {
  return static_cast<m::AgentMemoryIterator*>(mem)->Get<double>(key);
}

void flame_mem_set_double_actual_(void* mem, const char* key, double value) {
  static_cast<m::AgentMemoryIterator*>(mem)->Set<double>(key, value);
}


#ifdef __cplusplus
}
#endif
#endif  /* COMPAT__C__MEM_API_CPP_ */
