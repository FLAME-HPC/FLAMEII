#!/bin/bash
# $Id$
# ===========================================================================
#
# Copyright (c) 2012 STFC Rutherford Appleton Laboratory 
# Author: Shawn Chin 
# Date  : Oct 2012
#
# File  : flame2-config
# Desc  : Script to output compilation flags needed to compile and link
#         FLAME2 models. 
#         Also provide option to display configuration/compilation details
#         of local installation of FLAME2.
#
# ===========================================================================

###--- Parameters -----------------------------------------------------------

# Exit codes
SUCCESS=0
ERR_USAGE=1
PROG_NAME=`basename $0`

# Installation-specific parameters
BUILD_TYPE="@BUILD_TYPE@"
BUILD_VERSION="@PACKAGE_VERSION@"

USER_CFLAGS="@COMMON_CPPFLAGS@ -I@FLAME2_INSTALL_INCLUDEDIR@"
USER_LIBS="-L@FLAME2_INSTALL_LIBDIR@ -lflame2"
USER_STATIC_LIBS="@COMMON_LDFLAGS@"

DEFAULT_COMPILER="@CXX@"
DEFAULT_CFLAGS="@CPPFLAGS@ @CXXFLAGS@ @COMMON_CPPFLAGS@"
DEFAULT_LDFLAGS="@COMMON_LDFLAGS@"

FLAME2_CONFIG_DIR="@FLAME2_CONFIG_DIR@"
FLAME2_CONFIG_DATE="@FLAME2_CONFIG_DATE@"
FLAME2_CONFIG_ARGS="@FLAME2_CONFIG_ARGS@"
FLAME2_CONFIG_USER="@FLAME2_CONFIG_USER@"

INSTALL_PREFIX=`echo "@prefix@" | tr -s '/'`
INSTALL_BINDIR=`echo "@FLAME2_INSTALL_BINDIR@" | tr -s '/'`
INSTALL_LIBDIR=`echo "@FLAME2_INSTALL_LIBDIR@" | tr -s '/'`
INSTALL_INCLUDEDIR=`echo "@FLAME2_INSTALL_INCLUDEDIR@" | tr -s '/'`

###--- Functions ------------------------------------------------------------

# print brief usage info. 
# If arg provided, use $1 as exit code, else exit with $SUCCESS
function rtfm {
  cat << EOF
Usage: $PROG_NAME [--cflags] [--libs] [--static] [--version] [--query] [--help]

Try '$PROG_NAME --help' for more information.
EOF

  if test "$1" == ""; then
    exit $SUCCESS
  else
    exit $1
  fi
}

# print package version
function print_version {
  cat <<EOF
FLAME2 (Version $BUILD_VERSION) [$BUILD_TYPE build]
  
Copyright (c) 2012 STFC Rutherford Appleton Laboratory
Copyright (c) 2012 University of Sheffield

For info on package configuration, run $PROG_NAME --query
EOF
}

# print full usage info and exit successfully
function print_usage {

  cat <<EOF
FLAME2 (Version $BUILD_VERSION) [$BUILD_TYPE build]

Usage: $PROG_NAME [OPTION]...

$PROG_NAME is a FLAME2 configuration utility. It should be used to determine
the compiler and linker flags needed to compile a FLAME2 model. It can also
present the options used to configure and build the installed package.

$PROG_NAME --version  # Show FLAME2 version
$PROG_NAME --query    # Show options used to configure and build FLAME2
$PROG_NAME --cflags   # Output preprocessor and compiler flags
$PROG_NAME --libs     # Output linker flags
$PROG_NAME --libs --static # Output linker flags for static compilation

Example:
g++ program.cpp \$($PROG_NAME --cflags --ldflags)

All Options:

  -q, --query    Print configuration details of FLAME2 installation
  -v, --version  Print FLAME2 version

  -c, --cflags   Output preprocessor and compiler flags to compile FLAME2 model
  -l, --libs     Output linker flags to link FLAME2 model
  -s, --static   Allow static linking (used with --libs)

  -h, --help     Print this help message
  
EOF
  
  exit $SUCCESS
}

function print_query {

  cat <<EOF

---- [ General Info ] -------------------------------------------------------
Name              : FLAME2
Version           : $BUILD_VERSION

Config user       : $FLAME2_CONFIG_USER
Config date       : $FLAME2_CONFIG_DATE
Config directory  : $FLAME2_CONFIG_DIR
Config options    : $FLAME2_CONFIG_ARGS

---- [ Installation paths ] -------------------------------------------------
Install path      : $INSTALL_PREFIX
bin directory     : $INSTALL_BINDIR
lib directory     : $INSTALL_LIBDIR
include directory : $INSTALL_INCLUDEDIR 

---- [ Compilation details ] ------------------------------------------------
Default Compiler       : $DEFAULT_COMPILER
Default Linker flags   : $DEFAULT_LDFLAGS
Default Compiler flags : $DEFAULT_CFLAGS

EOF

}

# prints flags depending on what options were requested
function print_requested_flags {
  if test $A_cflags -eq 1; then
    echo -n "$USER_CFLAGS "
  fi

  if test $A_libs -eq 1; then
    echo -n "$USER_LIBS "
    if test $A_static -eq 1; then
      echo -n "$USER_STATIC_LIBS "
    fi
  fi
  echo ""
}

# Convert long option names to associated short option
# Usage: get_short_from_long "longoption"
function get_short_from_long {
  #long="$1"
  #if [ "$long" == "libs" ]; then # special case
  #  char="L"
  #else
  #  char=${long:0:1}  # get first char
  #fi
  #echo ${long:0:1}
  echo ${1:0:1}
}

# prints notice to stderr if the requested option is ignored
# Usage: ignore_option "longoption"
function ignore_option {
    
  # get name of option
  pname=$1
    
  # obtaing value of option (from global var A_optionname)
  eval pval=\$A_$pname
    
  # generate label for option
  onechar=`get_short_from_long $pname`
  label="-${onechar} (--${pname})"
   
  if [ $pval -eq 1 ]; then
    # print notice
    echo "WARNING: $label option ignored." >&2
    # set to 0
    eval A_$pname=0
  fi
}

# Check if long option is acceptable
# Uses global var - $acceptable_long_options
# Usage: if `is_acceptable_option "longoption"`; then do_something; fi
function is_acceptable_option {

  option="$1"
    
  # compare with each word in $acceptable_long_options
  # (is there a faster way to do this? Using external commands like sed or 
  # expr would require a spawning a subshell. Not great for performance.)
  for key in $acceptable_long_options; do
    if [ "$option" == "$key" ]; then
      echo true
      return 0
    fi
  done

  echo false
}

# Check if long option is acceptable
# Uses global var - $acceptable_short_options
# Usage: if `is_acceptable_short_option "o"`; then do_something; fi
function is_acceptable_short_option {

  option="$1"
  list=$acceptable_short_options
    
  # RHS=(LHS with $option removed)
  # hence, if RHS != LHS, $option exist in list
  if [ "$list" != "${list/$option/}" ]; then
    echo true
  else
    echo false
  fi
}

# These lists will be used by functions:
# * is_acceptable_option
# * is_acceptable_short_option
# * parse_long_options
acceptable_long_options="usage cflags libs static version query help"
acceptable_short_options="uhvVlscq"


# parse input arguments
# Uses global vars - $acceptable_short_options and $acceptable_long_options
# Usage: parse_input_arguments "--the --list -o -f --input --arguments"
# TODO: Add support for autocompletion (eg. --ver -> --version)
function parse_input_arguments {

  recurse=""
  unmatched=""
  until [ -z $1 ]; do
    case "$1" in
      -u|--usage)      print_usage;; # function will call exit 0
      -h|--help)    print_usage;; # function will call exit 0
      -v|-V|--version) A_version=1 ;;
      -l|--libs)       A_libs=1;;
      -s|--static)     A_static=1;;
      -c|--cflags)     A_cflags=1;;
      -q|--query)      A_query=1;;
      
      # capture unmatched options
      *) unmatched="$1 $unmatched";;
    esac
        
    shift # pop first argument from list
  done

  # quit function if all args accounted for
  if [ "$unmatched" == "" ]; then return 0; fi
    
  # handle unmatched options
  for arg in $unmatched
  do

    # if arg starts with '--'
    if [ "${arg:0:2}" == "--" ]; then

      echo " ERROR: Unknown option : $arg"
      rtfm $ERR_USAGE
        
    # if arg starts with '-'
    elif [ "${arg:0:1}" == "-" ]; then
            
      # if only '-'
      if [ "$arg" == "-" ]; then
        echo "ERROR: Unknown option : $arg"
        rtfm $ERR_USAGE
      fi
            
      temp_arg=${arg:1} # remove first char ('-')
            
      # did user use -option instead of --option?
      if `is_acceptable_option "$temp_arg"`; then
        echo "NOTE: Assuming you meant '--$temp_arg' instead of '-$temp_arg'" >&2
        recurse="--$temp_arg $recurse"
                
      else # treat -xyz as -x -y -z
                  
        while [ "$temp_arg" != "" ]; do
          # pop first char from $temp_arg
          firstchar=${temp_arg:0:1}
          temp_arg=${temp_arg:1}
                
          if `is_acceptable_short_option "$firstchar"`; then
            recurse="-$firstchar $recurse"
          else
            echo "ERROR: Unknown option : -$firstchar"
            rtfm $ERR_USAGE
          fi
        done
            
      fi
            
    else # if arg does not start with '-'

      if `is_acceptable_option "$arg"`; then
        echo "NOTE: Assuming you meant '--$arg' instead of '$arg'" >&2
        recurse="--$arg $recurse"
      else
        echo "ERROR: Unknown option : $arg"
        rtfm $ERR_USAGE
      fi
            
    fi
  done

  # feed corrected options back into this function
  if [ "$recurse" != "" ]; then
    parse_input_arguments $recurse
  fi
}

####################### CODE BODY ###########################################

# argument parameters
A_version=0  # --version
A_cflags=0   # --cflags
A_static=0   # --static
A_query=0    # --query
A_libs=0     # --libs

# calling script without any parameters will print usage info
if [ $# -eq 0 ]; then rtfm ; fi

# parse input args
parse_input_arguments $@

# Handle requests
if [ $A_query -eq 1 ] || [ $A_version -eq 1 ] # --query or --version
then

  # ignore these options (if they were requested)
  ignore_option "cflags"
  ignore_option "static"
  ignore_option "libs"

  if [ $A_query -eq 1 ]; then 
    print_query
    # --query already contains version information.
    # --version can be silently ignored if specified alongside --query
  else
    print_version
  fi
    
else

  # if neither --cflags nor --libs were specified, print usage msg
  if [ $A_cflags -eq 0 ] && [ $A_libs -eq 0 ]; then
    rtfm $ERR_USAGE
  fi
    
  print_requested_flags
fi

####################### SCRIPT ENDS #########################################
