## SOURCES and HEADERS must be defined above 

# conditionally include custom Makefile vars
# use "sinclude" so error is not raised if file does not exist
sinclude Makefile.inc
SOURCES += $(extra_SOURCES)
HEADERS += $(extra_HEADERS)
extra_COMPILE_FLAGS = $(extra_CPPFLAGS)
extra_LINK_FLAGS = $(extra_LDFLAGS)

# Required scripts
FLAME2_CONFIG = flame2-config
LIBTOOL = flame2-libtool

# command and flags to link binary to libflame2
LINK_COMMAND = $(LIBTOOL) --tag=CXX --mode=link --silent $(CXX)
LINK_FLAGS_DBG = $(shell $(FLAME2_CONFIG) --libs --rpath)
LINK_FLAGS_PROD = $(shell $(FLAME2_CONFIG) --libs --rpath --production)

# Compiler flags for different modes
COMPILE_FLAGS_COMMON = -Wall
COMPILE_FLAGS_DBG = $(shell $(FLAME2_CONFIG) --cflags)
COMPILE_FLAGS_PROD = $(shell $(FLAME2_CONFIG) --cflags --production)

# set default build type to devel
MODE = devel
COMPILE_FLAGS = $(COMPILE_FLAGS_COMMON) $(COMPILE_FLAGS_DBG)
LINK_FLAGS = $(LINK_FLAGS_DBG)

# conditionally force libtool to statically link all depencies
ifeq ($(static),1)
LINK_FLAGS = $(shell $(FLAME2_CONFIG) --libs --static) 
endif

EXECUTABLE = run
DEPS      = $(HEADERS) Makefile
OBJECTS   = $(SOURCES:.cpp=.o)

.PHONY: f2config show production

# default rule.
all: f2config $(EXECUTABLE)

# make sure flame2-config and libtool can be run
f2config:
	@$(FLAME2_CONFIG) --version > /dev/null
	@$(LIBTOOL) --version > /dev/null

# alternative build target
production: MODE = production
production: COMPILE_FLAGS = $(COMPILE_FLAGS_COMMON) $(COMPILE_FLAGS_PROD)
production: LINK_FLAGS = $(LINK_FLAGS_PROD)
production: $(EXECUTABLE)
	
show:
	@echo "Compiler: $(CXX)"
	@echo "Link command: $(LINK_COMMAND)"
	@echo ""
	@echo "Devel compile flags: $(COMPILE_FLAGS_COMMON) $(COMPILE_FLAGS_DBG)"
	@echo ""
	@echo "Production compile flags: $(COMPILE_FLAGS_COMMON) $(COMPILE_FLAGS_PROD)"
	@echo ""
	@echo "Linker flags: $(LINK_FLAGS)"

$(EXECUTABLE): $(OBJECTS)
ifeq ($(static),1)
	@echo "Statically linking executable '$@'"
else
	@echo "Linking executable '$@'"
endif
	@$(LINK_COMMAND)  $(OBJECTS) -o $@ $(LINK_FLAGS) $(extra_LINK_FLAGS)

$(OBJECTS): $(DEPS)

.cpp.o:
	@echo "[$(MODE)] Compiling $<"
	@$(CXX) -c $(COMPILE_FLAGS) $(extra_COMPILE_FLAGS) $< -o $@
	
clean:
	rm -f $(EXECUTABLE) $(OBJECTS)

