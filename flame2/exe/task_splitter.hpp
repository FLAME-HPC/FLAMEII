/*!
 * \file flame2/exe/task_splitter.hpp
 * \author Shawn Chin
 * \date 2012
 * \copyright Copyright (c) 2012 STFC Rutherford Appleton Laboratory
 * \copyright Copyright (c) 2012 University of Sheffield
 * \copyright GNU Lesser General Public License
 * \brief TaskSplitter class used to coordinate task splitting
 */
#ifndef EXE__TASK_SPLITTER_HPP_
#define EXE__TASK_SPLITTER_HPP_
#include <vector>
#include "task_interface.hpp"

namespace flame { namespace exe {

/*!
 * \brief Class used to coordinate and track task splitting
 *
 * This class is not thread-safe and relies on the calling class to
 * protect all access to with a mutex.
 */
class TaskSplitter {
  public:
    typedef std::vector<Task::Handle> TaskVector;  //!< vector of task handles

    /*!
     * \brief constuctor
     * \param id task id
     * \param tasks vector of tasks
     */
    TaskSplitter(Task::id_type id, const TaskVector& tasks);

    /*!
     * \brief Returns true if all tasks have completed
     * \return true if all tasks have completed
     * 
     * Returns true if running_ (number of tasks that have been assigned to workers
     * but not yer completed) is 0 and pending_ (number of tasks yet to be assigned)
     * is 0.
     */
    bool IsComplete(void) const;

    /*!
     * \brief Returns true if all tasks have been assigned
     * \return true if all tasks have been assigned
     * 
     * When this returns true, there may be still tasks that have been assigned
     * but not yet completed.
     *
     * We don't rely on tasks_.size() since tasks_ are not popped on assignment.
     * Tasks are always held in the vector to keeps the object alive (held by
     * shared pointer).
     */
    bool NonePending(void) const;

    /*!
     * \brief Indicate that a task instance has been completed
     * \return true if NonePending()
     *
     * Increments running_, decrements pending_ and returns true if NonePending()
     */
    bool OneTaskAssigned(void);

    /*!
     * \brief Indicate that a task instance has been completed
     * \return true if IsComplete()
     *
     * Decrements running_ and returns true if IsComplete()
     */
    bool OneTaskDone(void);

    /*!
     * \brief Returns reference to the next task
     * \return reference to task instance
     * 
     * Return a reference to a task within tasks_ indexed by next_. Then,
     * increments next_.
     *
     * Throws flame::exceptions::flame_exception if called after all tasks
     * have been returned.
     */
    Task& GetTask();

    /*! 
     * \brief Returns the number of subtasks generated by split
     * \return number of tasks
     */
    size_t GetNumTasks(void);

  private:
    Task::id_type id_;  //!< ID of the parent task
    size_t pending_;  //!< Number of pending tasks (not yet assigned)
    size_t running_;  //!< Number of running tasks (assigned but not done)
    size_t next_;  //!< The next task to return from tasks_
    TaskVector tasks_;  //!< Vector of task handles
};

}}  // namespace flame::exe
#endif  // EXE__TASK_SPLITTER_HPP_
